name: Build & Push vite App to GHCR

on:
  push:
    branches: ["main"]
    tags: ["v*", "release-*"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: frontend-prod
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  # ✅ 소문자 고정 (대문자 섞이면 Docker가 거부)
  IMAGE_REPO: algovisiondh/algovision-frontend
  VITE_API_BASE: ${{ vars.VITE_API_BASE || 'https://algovision.co.kr' }}
  VITE_BASE: ${{ vars.VITE_BASE || '/' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch, optional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha
            type=ref,event=tag
            # 긴 SHA 태그도 함께 푸시(배포에서 sha-${{ github.sha }} 사용)
            type=raw,value=sha-${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_BASE=${{ env.VITE_API_BASE }}
            VITE_BASE=${{ env.VITE_BASE }}

  deploy:
    name: Deploy to server (pull & run)
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: SSH | Login GHCR & deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}     # 서버 퍼블릭 IP 또는 프록시 안 거치는 DNS(회색 구름)
          username: ${{ secrets.SSH_USER }} # 예: ubuntu
          key: ${{ secrets.SSH_KEY }}       # 새로 만든 개인키 전체
          # port: 22                        # 비표준 포트면 여기에 지정
          script: |
            set -euo pipefail

            # ===== 사용자 변수 (원격 셸에서 직접 정의) =====
            IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}"
            SHA_TAG="sha-${{ github.sha }}"
            REMOTE_DIR="/home/ubuntu/docker/frontend"
            COMPOSE_FILE="compose.yml"   # 서버 파일명이 compose.yaml이면 이 값을 바꿔줘

            # (Private 레포면 필요) GHCR 로그인. Public이면 실패 무시 가능.
            echo "${{ secrets.GHCR_READ_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin || true

            cd "$REMOTE_DIR"

            # compose의 image 라인을 현재 SHA로 교체
            # 예) image: ghcr.io/algovisiondh/algovision-frontend:sha-PLACEHOLDER
            sed -i "s#ghcr.io/.*/.*:sha-.*#${IMAGE}:${SHA_TAG}#g" "$COMPOSE_FILE"

            # 최신 이미지 pull & 재기동 (헬스체크 대기)
            docker compose -f "$COMPOSE_FILE" pull
            docker compose -f "$COMPOSE_FILE" up -d --wait

            # 스모크 테스트 (5173:80 매핑 기준)
            curl -fsS http://localhost:5173/ > /dev/null

            # 오래된 dangling 이미지 정리(선택)
            docker image prune -f
