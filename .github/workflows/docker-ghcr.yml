name: Build & Push vite App to GHCR
on:
  push:
     branches: ["main"]
     tags: ["v*", "release-*"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{github.repository}}
  VITE_API_BASE: ${{vars.VITE_API_BASE || 'https://algovision.co.kr'}}
  VITE_BASE: ${{vars.VITE_BASE || '/' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch, optional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha
            type=ref,event=tag
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64, linux/arm64       # 필요 시 "linux/amd64,linux/arm64"
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_BASE=${{ env.VITE_API_BASE }}
            VITE_BASE=${{ env.VITE_BASE }}

  deploy:
    name: Deploy to server (pull & run)
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    env:
      IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      SHA_TAG: sha-${{ github.sha }}
      # 서버에 있는 compose 파일 경로
      REMOTE_DIR: /home/ubuntu/docker/frontend

    steps:
      - name: SSH | Login GHCR & deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail

            # GHCR 로그인 (서버에서 pull 용). 퍼블릭이면 생략 가능.
            echo ${{ secrets.GHCR_READ_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            cd $REMOTE_DIR

            # compose 파일의 이미지 태그를 현재 SHA로 교체
            sed -i "s#ghcr.io/.*/.*:sha-.*#${IMAGE}:${SHA_TAG}#g" compose.yaml

            # 최신 이미지 풀 & 재기동 (건강상태 대기)
            docker compose pull
            docker compose up -d --wait

            # 스모크 테스트
            curl -fsS http://localhost:5173/ > /dev/null

            # 정리(선택): 오래된 dangling 이미지 삭제
            docker image prune -f
